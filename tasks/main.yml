---

- name: Load settings based on distribution
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"

- name: Install common packages
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ package_list['common'] }}"

- name: Install builder-specific packages
  package:
    name: "{{ item }}"
    state: present
  with_items: "{{ package_list[builder] }}"

- name: Install more packages for Fedora
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - redhat-rpm-config
  when: ansible_distribution == 'Fedora' and ansible_distribution_major_version >= '23'

- name: Define checkout directory
  set_fact:
    checkout_dir: "/srv/builder/{{ builder_name }}"

- name: Deploy the build script
  copy:
    dest: /usr/local/bin/build_deploy.py
    src: build_deploy.py
    mode: 0755
    owner: root
    group: root

- name: Create {{ builder_username }} to build
  user:
    name: "{{ builder_username }}"
    comment: "Static builder user"
    generate_ssh_key: yes
    home: "/srv/builder"
    ssh_key_file: "/srv/builder/.ssh/{{ builder_name }}_id.rsa"
  register: result

# needed so NRPE can check log
- name: Fix directory permission for NRPE
  file:
    path: "/srv/builder"
    mode: 0755
    state: directory

# not before the homedir is created
- name: "Prepare builder software manually"
  block:
    - name: "Install builder's repository"
      git:
        repo: "{{ builder_repo[builder].url }}"
        dest: "/srv/builder/{{ builder_repo[builder].subdest }}"
        version: "{{ builder_repo[builder].version | default('HEAD') }}"
        update: yes
        force: yes
    - name: "Setup writable directories in builder's repository"
      file:
        path: "/srv/builder/{{ builder_repo[builder].subdest }}/{{ item }}"
        owner: '{{ builder_username }}'
        group: '{{ builder_username }}'
        recurse: yes
      with_items: "{{ builder_repo[builder].writable_subdirs | default([]) }}"
  when: builder_repo[builder] is defined

- name: Clone git repo {{ git_url }}
  git:
    repo: "{{ git_url }}"
    dest: "{{ checkout_dir }}"
    version: "{{ git_version | default( 'HEAD' ) }}"
    force: yes   # needed because of submodules to avoid "Local modifications exist in repository"
  become: yes
  become_user: '{{ builder_username }}'
  become_method: 'su'
  register: git_res
  # remote_url_changed is not always defined
  changed_when: (git_res.remote_url_changed | default(false)) or (git_res.after != git_res.before)

- name: Check if a Gemfile is present
  stat:
    path: "{{ checkout_dir }}/Gemfile"
  register: gemfile_st

- name: Install gems required to build
  command: "bundle install --path ~/.gem"
  args:
    chdir: "{{ checkout_dir }}"
  become: yes
  become_user: '{{ builder_username }}'
  become_method: 'su'
  changed_when: False
  when: gemfile_st.stat.exists

- name: Clear RSYNC URL
  set_fact:
    rsync_url: ""

- name: Compute RSYNC URL
  set_fact:
    rsync_url: "{{ rsync_user }}@{{ rsync_server }}:{{rsync_location}}"
  when: rsync_server is defined and rsync_location is defined and rsync_user is defined

- name: Deploy yaml config for {{ builder_name }}
  template:
    dest: "/srv/builder/{{ builder_name }}.yml"
    src: builder.yml.j2

- name: Add cron to build {{ builder_name }}
  cron:
    name: "build and deploy {{ builder_name }}"
    job: "/usr/local/bin/build_deploy.py /srv/builder/{{ builder_name }}.yml"
    user: "{{ builder_username }}"
    state: "{% if external_trigger %}absent{% else %}present{% endif %}"

- name: Setup cron email
  cronvar:
    user: "{{ builder_username }}"
    name: MAILTO
    value: "{{ cron_error_email }}"
  when: cron_error_email is defined

# needed to detect package manager (at least) on the other host
# without cache or if it expired, the play would fail
- name: Get facts for the other side
  setup:
  delegate_to: "{{ rsync_server }}"
  delegate_facts: True
  when: rsync_url != '' and rsync_server not in play_hosts

# TODO add ip restriction
- name: Copy the key on the other side
  authorized_key:
    key: "{{ result.ssh_public_key }}"
    key_options: "command=\"rsync --server -vlogtrze.isf --delete-after --omit-dir-times . {{ rsync_location }}\",no-port-forwarding,no-agent-forwarding,no-X11-forwarding,no-pty"
    user: "{{ rsync_user }}"
  delegate_to: "{{ rsync_server }}"
  when: rsync_url != ''

- name: Install Rsync
  package:
    name: "{{ rsync_package }}"
    state: present
  when: rsync_url != ''

- name: Install Rsync on the other side
  package:
    name: "{{ rsync_package }}"
    state: present
  delegate_to: "{{ rsync_server }}"
  when: rsync_url != ''

- name: Compute SSH config for rsync sync
  set_fact:
    remote_user: "{{ rsync_user }}"
    remote_host: "{{ rsync_server }}"
  when: rsync_url != ''

- name: Compute SSH config for openshift sync
  block:
    - name: Fetch site configuration
      slurp:
        src: "/srv/builder/{{ builder_name }}/data/site.yml"
      register: site_raw
    - name: Parse site configuration
      set_fact:
        site: "{{ site_raw['content'] | b64decode | from_yaml }}"
    - name: Get OpenShift sync
      set_fact:
        # seen pattern: <user>@<host> or ssh://<user>@<host>/<path>
        remote_user: "{{ openshift | default(site.openshift) | regex_replace('^.*?([^/]+)@.*$', '\\1') }}"
        remote_host: "{{ openshift | default(site.openshift) | regex_replace('^.*@([^/]+).*$', '\\1') }}"
  when: rsync_url == ''

- name: Create SSH config
  blockinfile:
    path: /srv/builder/.ssh/config
    owner: "{{ builder_username }}"
    group: "{{ builder_username }}"
    block: |
      Match Host {{ remote_host }} User {{ remote_user }}
      	IdentityFile /srv/builder/.ssh/{{ builder_name }}_id.rsa
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ builder_name }}"
    create: true

