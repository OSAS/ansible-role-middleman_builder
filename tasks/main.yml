---

- name: Load settings based on distribution
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}.yml"
    - "{{ ansible_os_family }}.yml"

- name: Install packages
  package: name={{ item }} state=present
  with_items: "{{ package_list }}"

- name: Install more packages for Fedora
  package:
    name: "{{ item }}"
    state: present
  with_items:
  - redhat-rpm-config
  when: ansible_distribution == 'Fedora' and ansible_distribution_major_version >= '23'

- name: Define checkout directory
  set_fact:
    checkout_dir: "/srv/builder/{{ name }}"

- name: Deploy the build script
  copy:
    dest: /usr/local/bin/build_deploy.py
    src: build_deploy.py
    mode: 0755
    owner: root
    group: root

- name: Create {{ builder_username }} to build
  user:
    name: "{{ builder_username }}"
    comment: "Static builder user"
    generate_ssh_key: yes
    home: "/srv/builder"
    ssh_key_file: "/srv/builder/.ssh/{{ name }}_id.rsa"
  register: result

# needed so NRPE can check log
- name: Fix directory permission for NRPE
  file:
    path: "/srv/builder"
    mode: 0755
    state: directory

- name: Clone git repo {{ git_url }}
  git:
    repo: "{{ git_url }}"
    dest: "{{ checkout_dir }}"
    version: "{{ git_version | default( 'HEAD' ) }}"
  become: yes
  become_user: '{{ builder_username }}'
  become_method: 'su'

- name: Install gems required to build
  command: "bundle install --path ~/.gem"
  args:
    chdir: "{{ checkout_dir }}"
  become: yes
  become_user: '{{ builder_username }}'
  become_method: 'su'
  changed_when: False

- name: Clear RSYNC URL
  set_fact:
      rsync_url: ""

- name: Compute RSYNC URL
  set_fact:
      rsync_url: "{{ rsync_user }}@{{ rsync_server }}:{{rsync_location}}"
  when: rsync_server is defined and rsync_location is defined and rsync_user is defined

- name: Deploy yaml config for {{ name }}
  template:
    dest: "/srv/builder/{{ name }}.yml"
    src: builder.yml

- name: Add cron to build {{ name }}
  cron:
    name: "build and deploy {{ name }}"
    job: "/usr/local/bin/build_deploy.py /srv/builder/{{ name }}.yml"
    user: "{{ builder_username }}"

- name: Setup cron email
  cronvar:
    user: "{{ builder_username }}"
    name: MAILTO
    value: "{{ cron_error_email }}"
  when: cron_error_email is defined

# needed to detect package manager (at least) on the other host
# without cache or if it expired, the play would fail
- name: Get facts for the other side
  setup:
  delegate_to: "{{ rsync_server }}"
  delegate_facts: True
  when: rsync_url != '' and rsync_server not in play_hosts

# TODO add ip restriction
- name: Copy the key on the other side
  authorized_key:
      key: "{{ result.ssh_public_key }}"
      key_options: "command=\"rsync --server -vlogtrze.isf --delete-after --omit-dir-times . {{ rsync_location }}\",no-port-forwarding,no-agent-forwarding,no-X11-forwarding,no-pty"
      user: "{{ rsync_user }}"
  delegate_to: "{{ rsync_server }}"
  remote_user: "{{ rsync_user }}"
  when: rsync_url != ''

# Unfortunately recently fails with:
#   fatal: [osci-web-builder.osci.io -> 8.43.85.237]: FAILED! => {"changed": false, "failed": true, "msg": "Could not detect which package manager to use. Try gathering facts or setting the \"use\" option."}
# It most probably is an Ansible regression, investigatingâ€¦
#   => fixed in v2.3.2.0-0.4.rc4
#
#- name: Install Rsync on the other side
#  package:
#    name: "{{ rsync_package }}"
#    state: present
#  delegate_to: "{{ rsync_server }}"
#  when: rsync_url != ''

- name: Compute SSH config for rsync sync
  set_fact:
    remote_user: "{{ rsync_user }}"
    remote_host: "{{ rsync_server }}"
  when: rsync_url != ''

- name: Compute SSH config for openshift sync
  block:
    - name: Fetch site configuration
      slurp:
        src: "/srv/builder/{{ name }}/data/site.yml"
      register: site_raw
    - name: Parse site configuration
      set_fact:
        site: "{{ site_raw['content'] | b64decode | from_yaml }}"
    - name: Get OpenShift sync
      set_fact:
        # seen pattern: <user>@<host> or ssh://<user>@<host>/<path>
        remote_user: "{{ site.openshift | regex_replace('^.*?([^/]+)@.*$', '\\1') }}"
        remote_host: "{{ site.openshift | regex_replace('^.*@([^/]+).*$', '\\1') }}"
  when: rsync_url == ''

- name: Create SSH config
  blockinfile:
    path: /srv/builder/.ssh/config
    owner: "{{ builder_username }}"
    group: "{{ builder_username }}"
    block: |
      Match Host {{ remote_host }} User {{ remote_user }}
      	IdentityFile /srv/builder/.ssh/{{ name }}_id.rsa
    marker: "# {mark} ANSIBLE MANAGED BLOCK {{ name }}"
    create: true

